//addexpense.html file
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <title>Add Expense</title>
    <style>
        body{
            margin: 5%;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto">
    <form onsubmit="expense(event)">
        <div class="form-group">
        <label for="expenseamount">Choose expenseamount:</label>
        <input type="number" name="expenseamount" id="expenseamount" class="form-control" required> </input>
        </div>
        <div class="form-group">
        <label for="description">Choose description:</label>
        <input type="text" name="description" id="description" class="form-control" required> </input>
        </div>
        <div class="form-group">
        <label for="category">Choose a category:</label>
        <select id="category" name="category" id="category" class="form-control" required>
            <option value="select category">select category</option>
            <option value="fuel">fuel</option>
            <option value="food">food</option>
            <option value="electricity">electricity</option>
            <option value="Movie">Movie</option>
        </select></div>
        <div class="form-group">
        <button class="btn btn-primary">Add Expense</button></div>
    </form>
        </div></div>
        <table class="table table-striped table-bordered" id="expenseTable">
            <thead>
             <tr>
              <th hidden>Expense id</th>   
              <th>Amount</th>
              <th>Description</th>
              <th>Category</th>
              <th>Actions</th>
             </tr>
            </thead>
            <tbody></tbody>
           </table>
        </div>
        <button id="rzp-button1">Buy Premium</button>
        <button id="showleaderboard">Show  Leaderboard</button>
        <ul id="listexpenses"></ul>
        
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.7/axios.min.js"></script>
    <script src="addexpense.js"></script>
    <script src="showleaderboard.js"></script>
   
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

   
</body>
</html>

//addexpense.js file


// add user 
async function expense(event) {
  try{
  event.preventDefault();
  const expenseamount=  document.getElementById('expenseamount').value;
  const description= document.getElementById('description').value;
  const category=document.getElementById('category').value;
  const userId=localStorage.getItem('token');
  const obj={
    expenseamount,
    description,
    category
  }

   const expensedata=await axios.post('http://localhost:3000/userexpense/addexpense',obj,{ headers: { "Authorization": userId } });
   showNewExpenseOnScreen(expensedata.data);
  }
  catch(error){
   console.log(error);
  }
  resetForm();
}

window.addEventListener("DOMContentLoaded",  () =>{
    const userId=localStorage.getItem('token');
    const rzpbutton=document.getElementById('rzp-button1');
 axios.get('http://localhost:3000/userexpense/getexpenses',{ headers: { "Authorization": userId } }).then(response=>{
  console.log(response)
  if(response.data.user.ispremiumuser===true){
   rzpbutton.parentNode.removeChild(rzpbutton);
   const p=document.createElement('p');
   const txt=document.createTextNode('You are a Premium User');
   p.appendChild(txt);
   document.body.appendChild(p);
  }
  for(var i=0;i<response.data.expense.length;i++){
    showNewExpenseOnScreen(response.data.expense[i])
  }
}).catch(err=>console.log(err));

});


//delete user

function removeExpense(row) {
row.parentNode.removeChild(row);
const id= row.cells[0].innerHTML;
axios.get(`http://localhost:3000/userexpense/deleteexpense/${id}`) 
}

//reset form

function resetForm(){
document.getElementById('expenseamount').value='';
document.getElementById('description').value='';
document.getElementById('category').value='';
// document.getElementById('userId').value = '';
// document.getElementById('rowIndex').value = '';
// document.getElementById('addButton').innerHTML = 'Add E';
}

function showNewExpenseOnScreen(expense){
 let tableBody =  document.getElementById('expenseTable').getElementsByTagName('tbody')[0];
  let row = '<tr><td hidden>'+expense.id+'</td><td>' + expense.amount + '</td><td>' + expense.description + '</td><td>' + expense.category + '</td><td><button type="button" class="btn btn-sm btn-danger" onclick="removeExpense(this.parentNode.parentNode)">Delete</button></td></tr>';
  tableBody.insertAdjacentHTML('beforeend', row);
}

document.getElementById('rzp-button1').addEventListener('click', async function (e) {
    const token=localStorage.getItem('token');
    const rzpbutton=document.getElementById('rzp-button1');
    const response = await axios.get('http://localhost:3000/purchase/premiummembership', { headers: { "Authorization": token } });
 //   console.log(response);
    var options = {
        "key": response.data.key_id,
        "order_id": response.data.order.id,
        "handler": function (response) {
           // console.log(response);
            axios.post('http://localhost:3000/purchase/updatetransactionstatus', {
                order_id: options.order_id,
                payment_id: response.razorpay_payment_id,
            }, { headers: { "Authorization": token } })
                .then(() => {
                    alert('You are a Premium User Now');
                    rzpbutton.parentNode.removeChild(rzpbutton);
                    const p=document.createElement('p');
                    const txt=document.createTextNode('You are a Premium User');
                    p.appendChild(txt);
                    document.body.appendChild(p);
                })
                .catch(() => {
                    alert('Something went wrong. Try Again!!!');
                });
        }
    };
    const rzp1 = new Razorpay(options);
    rzp1.open();
    e.preventDefault();

    rzp1.on('payment.failed', function (response) {
     // console.log(response);
       // alert("Something Went Wrong");
       axios.post('http://localhost:3000/purchase/updatetransactionstatus', {
        order_id: response.error.metadata.order_id,
        payment_id: response.error.metadata.payment_id,
        reason:response.error.reason
    }, { headers: { "Authorization": token } })
        .then(() => {
            alert('Your Payment Failed');
        })
        .catch(() => {
            alert('Something went wrong. Try Again!!!');
        });
        // alert(response.error.code);
        // alert(response.error.description);
        // alert(response.error.source);
        // alert(response.error.step);
        // alert(response.error.reason);
        // alert(response.error.metadata.order_id);
        // alert(response.error.metadata.payment_id);
    });
});

//showleaderboard.js 



document.getElementById('showleaderboard').onclick=async function(e){
    e.preventDefault();
    const showexpense= await axios.get('http://localhost:3000/premium/showleaderboard');
    console.log(showexpense)
    for(let i=0;i<showexpense.data.length();i++){
   showNewtotalexpensesOnScreen(showexpense.data[i]);
    }
   
}


function showNewtotalexpensesOnScreen(expense){
    document.getElementById('listexpenses').innerText='Leader Board';
    let ullist =  document.getElementById('listexpenses');
     let row = '<li>Name -'+expense.name+'    Total Expenst-' + expense.amount + '</li>';
     ullist.insertAdjacentHTML('beforeend', row);
   }

//puechase.js in controlers


const Razorpay = require('razorpay');
const Order = require('../models/orders')


const purchasepremium =async (req, res) => {
    try {
        var rzp = new Razorpay({
            key_id: process.env.RAZORPAY_KEY_ID,
            key_secret: process.env.RAZORPAY_KEY_SECRET
        })
       // console.log(rzp);
        const amount = 2500;

        rzp.orders.create({amount, currency: "INR"}, (err, order) => {
           
            if(err) {
                throw new Error(err);
            }
            req.user.createOrder({ orderid: order.id, status: 'PENDING'}).then(() => {
             //   console.log(order)
                return res.status(201).json({ order, key_id : rzp.key_id});

            }).catch(err => {
                throw new Error(err)
            })
        })
    } catch(err){
        console.log(err);
        res.status(403).json({ message: 'Sometghing went wrong', error: err})
    }
}

 const updateTransactionStatus = (req, res ) => {
    try {
        const { payment_id, order_id,reason} = req.body;
       // console.log(req.body);
        Order.findOne({where : {orderid : order_id}}).then(order => {
            if(reason==='payment_failed'){
                order.update({ paymentid: payment_id, status: 'FAILED'}).then(() => {
                    console.log(order)
                    req.user.update({ispremiumuser: false})
                    return res.status(202).json({sucess: false, message: "Transaction Failed"});
                }).catch((err)=> {
                    console.log(err)
                    throw new Error(err);
                });
            
            }else{
            order.update({ paymentid: payment_id, status: 'SUCCESSFUL'}).then(() => {
                req.user.update({ispremiumuser: true})
                return res.status(202).json({sucess: true, message: "Transaction Successful"});
            }).catch((err)=> {
                console.log(err)
                throw new Error(err);
            });
        }
           
           
        }
        
        ).catch(err => {
            throw new Error(err);
        })
    } catch (err) {
        console.log(err);
        res.status(403).json({ errpr: err, message: 'Sometghing went wrong' })

    }
}

module.exports = {
    purchasepremium,
    updateTransactionStatus
}

//show leaderbpoard in controler

const path = require('path');
const Expense = require('../models/addexpense');
const User = require('../models/signup');
const sequelize = require('sequelize');
const db=require('../util/database')


exports.getexpenses=(req,res,next)=>{

    Expense.findAll().then(expense=>{
        db.sequelize.query('SELECT * FROM expenses, users WHERE expenses.userId = users.id ').success(function(rows){
            console.log(rows)
            res.json(rows);
        });
        
   
           

      }).catch(err=>console.log(err))
    };
